{"meta":{"title":"想飛的葉子","subtitle":null,"description":null,"author":"TzuHui Yeh","url":"https://tzuhui.github.io"},"pages":[{"title":"About","date":"2019-07-07T09:56:33.065Z","updated":"2019-07-07T09:56:33.065Z","comments":true,"path":"about/index.html","permalink":"https://tzuhui.github.io/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2019-05-20T15:12:49.730Z","updated":"2018-10-26T03:21:38.679Z","comments":true,"path":"categories/index.html","permalink":"https://tzuhui.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-05-20T15:12:49.732Z","updated":"2018-10-26T03:21:38.679Z","comments":true,"path":"tags/index.html","permalink":"https://tzuhui.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"gulp 3 遷移至 gulp 4","slug":"JavaScript/gulp/gulp3-to-4","date":"2019-08-28T16:00:00.000Z","updated":"2019-09-07T04:08:35.532Z","comments":true,"path":"2019/08/29/JavaScript/gulp/gulp3-to-4/","link":"","permalink":"https://tzuhui.github.io/2019/08/29/JavaScript/gulp/gulp3-to-4/","excerpt":"從 2018 年 10 月開始，使用 npm 下載 gulp 預設的版本都將為 4，因 gulp 3 與 4 在寫法上有些更新，所以在安裝 4 的情況之下，運行 3 的寫法是有可能會出錯的，因此這篇主要說明 gulp 3 與 4 的差異","text":"從 2018 年 10 月開始，使用 npm 下載 gulp 預設的版本都將為 4，因 gulp 3 與 4 在寫法上有些更新，所以在安裝 4 的情況之下，運行 3 的寫法是有可能會出錯的，因此這篇主要說明 gulp 3 與 4 的差異 若仍需要使用 gulp 3，也可以用此指令安裝 3 的版本1npm install gulp@^3.9.1 使用 series() 取代原本 Arrays 任務安排的寫法Gulp 4 介紹了新的組合任務方法：series()、parallel() series() 按指定的順序一次運行一個任務parallel() 以任何順序同時運行任務 舉例：在 gulp 31gulp.task(&apos;default&apos;, [&apos;browserSync&apos;]); 轉換到 gulp 41gulp.task(&apos;default&apos;, gulp.series(&apos;browserSync&apos;)) 兩者也可以混用，例如：1gulp.task(&apos;build&apos;, gulp.series(&apos;clean&apos;, gulp.parallel(&apos;sass&apos;, &apos;vendorJs&apos;))); 這樣的寫法也是先執行 clean 後再執行後面的 sass, vendorJS而 sass, vendorJS 是同時執行的 使用 done() - 當任務結束後的 callback12345678gulp.task(&apos;default&apos;, gulp.series(&apos;clean&apos;, gulp.parallel(&apos;sass&apos;, &apos;vendorJs&apos;), function(done) &#123; // 也就是先確保前面都執行完 gulp.watch([&apos;./source/stylesheets/**/*.sass&apos;, &apos;./source/stylesheets/**/*.scss&apos;],gulp.series(&apos;sass&apos;)); done(); &#125;)); 模組化設計 - 將 task 改用一般的函式寫法好處在於可以更方便的管理使用。 另外建立一個 JS 檔 (ex: vendor.js )，並將 task 改用函式的方式來寫 舉例：12345678gulp.task(&apos;vendorJs&apos;, function () &#123; return gulp.src([ &apos;./node_modules/jquery/dist/jquery.slim.min.js&apos;, &apos;./node_modules/bootstrap/dist/js/bootstrap.bundle.min.js&apos; ]) .pipe($.concat(&apos;vendor.js&apos;)) .pipe(gulp.dest(&apos;./public/javascripts&apos;))&#125;) 改用函式的寫法：12345678910const vendorJs = function(done) &#123; gulp.src([ &apos;./node_modules/jquery/dist/jquery.slim.min.js&apos;, &apos;./node_modules/bootstrap/dist/js/bootstrap.bundle.min.js&apos; ]) .pipe($.concat(&apos;vendor.js&apos;)) .pipe(gulp.dest(&apos;./public/javascripts&apos;)) done();&#125;;exports.vendorJs = vendorJs; 在原本的 JS 檔（主要安排與執行任務的檔案，ex: index.js）將上面寫好的檔案引入 1const &#123; vendorJs &#125; = require(&apos;./vendor.js&apos;); 最後將 vendorJs 安排到任務執行 1gulp.series(vendorJs) 要注意因為是引入的方法，所以這邊安排任務不是使用字串 &#39;&#39; 寫法","categories":[{"name":"gulp","slug":"gulp","permalink":"https://tzuhui.github.io/categories/gulp/"}],"tags":[{"name":"技術筆記","slug":"技術筆記","permalink":"https://tzuhui.github.io/tags/技術筆記/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://tzuhui.github.io/tags/JavaScript/"},{"name":"gulp","slug":"gulp","permalink":"https://tzuhui.github.io/tags/gulp/"}]},{"title":"在專案引入 gulp 4.0 並開啟 Ｗeb Server (使用 browser-sync)","slug":"JavaScript/gulp/gulp-browserSync","date":"2019-08-16T16:00:00.000Z","updated":"2019-08-17T05:11:36.563Z","comments":true,"path":"2019/08/17/JavaScript/gulp/gulp-browserSync/","link":"","permalink":"https://tzuhui.github.io/2019/08/17/JavaScript/gulp/gulp-browserSync/","excerpt":"這篇是使用 gulp 4，所以使用 gulp 3 要注意 task 安排的寫法正文開始！這一篇要從資料夾中只含有一個 index.html 檔案開始說起","text":"這篇是使用 gulp 4，所以使用 gulp 3 要注意 task 安排的寫法正文開始！這一篇要從資料夾中只含有一個 index.html 檔案開始說起 1. 初始化套件管理器 ( NPM )1npm init 下指令後會有一些需要輸入的內容，懶人建立就都按 Enter 就好完成後資料夾中就會有 package.json 檔案了 2. 新增一個 JS 檔案ex: gulpfile.js用來加入 gulp 任務 3. require gulp 模組在終端機下指令1npm install gulp 在 gulpfile.js 寫入1const gulp = require(&apos;gulp&apos;); 引入 gulp 後可以使用 gulp.task 來執行任務例如：1gulp.task(&apos;default&apos;, gulp.series(&apos;browserSync&apos;)) 在 gulp4 中可使用 gulp.series() 和 gulp.parallel() 來安排任務進行 gulp.series() -&gt; 按照順序進行gulp.parallel() -&gt; 同時進行&#39;default&#39; -&gt; 任務名稱&#39;browserSync&#39; -&gt; 任務的內容 了解任務要如何安排後，接下來要安裝用來開始 web server 的套件 - browser-sync 4. 載入 browser-sync 套件在終端機下指令安裝 browser-sync1npm install browser-sync 在 gulpfile.js 寫入1const browserSync = require(&apos;browser-sync&apos;); 5. 使用 browserSync 所提供的方法來 init參考寫法：1234567gulp.task(&apos;browserSync&apos;, function () &#123; browserSync.init(&#123; server: &#123; baseDir: &apos;./&apos;, // 指向要開啟的資料夾 &#125;, &#125;)&#125;); 6. 執行 gulp 就可以順利開啟 web server 啦小補充 - 運用 gulp watch() 讓檔案有更動時自動 reloadgulp watch 是用於監看全局任務，因此可以用於當檔案發生改變時觸發某行為例如：1gulp.watch(&quot;*.html&quot;).on(&quot;change&quot;, browserSync.reload); 也就是當 HTML 檔案有更動時，在儲存的同時 web server 也會 reload，這樣在開發上就更方便啦～ 更多 browser-sync 使用方法請見：https://browsersync.io/docs/gulp#gulp-install","categories":[{"name":"gulp","slug":"gulp","permalink":"https://tzuhui.github.io/categories/gulp/"}],"tags":[{"name":"技術筆記","slug":"技術筆記","permalink":"https://tzuhui.github.io/tags/技術筆記/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://tzuhui.github.io/tags/JavaScript/"},{"name":"gulp","slug":"gulp","permalink":"https://tzuhui.github.io/tags/gulp/"}]},{"title":"在 Vue Cli 中加入自定義 Bootstrap 樣式","slug":"Bootstrap/vue-cli-use-bootstrap","date":"2019-06-19T16:00:00.000Z","updated":"2019-06-20T17:03:59.364Z","comments":true,"path":"2019/06/20/Bootstrap/vue-cli-use-bootstrap/","link":"","permalink":"https://tzuhui.github.io/2019/06/20/Bootstrap/vue-cli-use-bootstrap/","excerpt":"常常忘記該怎麼加入自定義的 Bootstrap 樣式，所以直接記下來不囉唆！基礎的引入很簡單，按照步驟一定搞定～","text":"常常忘記該怎麼加入自定義的 Bootstrap 樣式，所以直接記下來不囉唆！基礎的引入很簡單，按照步驟一定搞定～ 安裝 1npm install bootstrap --save 在 src 下的 assets 建立 helpers 資料夾並將 node_moduled 中的 bootstrap _variables.scss 複製過去 在 src 下的 assets 建立 all.scss 檔案用來管理所有 scss 在 all.scss 引入順序 123@import \"~bootstrap/scss/functions\";@import 'helpers/variables';@import \"~bootstrap/scss/bootstrap\"; 在 App.vue 中引入 all.scss 123&lt;style lang=\"scss\"&gt; @import \"./assets/all.scss\"&lt;/style&gt; 如果要再加入其他自定義的 scss 可以在 src 下的 assets 建立 components 資料夾ㄅㄨ並加入自定義的元件 scss 樣式，接著再 all.scss 引入就完成了！","categories":[{"name":"Bootstrap 筆記","slug":"Bootstrap-筆記","permalink":"https://tzuhui.github.io/categories/Bootstrap-筆記/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://tzuhui.github.io/tags/Vue/"},{"name":"Bootstrap","slug":"Bootstrap","permalink":"https://tzuhui.github.io/tags/Bootstrap/"},{"name":"技術筆記","slug":"技術筆記","permalink":"https://tzuhui.github.io/tags/技術筆記/"}]},{"title":"連葉子都秒懂的 Fast Forward","slug":"Git/fast-forward","date":"2019-06-19T16:00:00.000Z","updated":"2019-06-20T17:03:42.005Z","comments":true,"path":"2019/06/20/Git/fast-forward/","link":"","permalink":"https://tzuhui.github.io/2019/06/20/Git/fast-forward/","excerpt":"fast-forward 出現時機在進行 merge 的時候，git 預設會以 fast-forward 的模式進行","text":"fast-forward 出現時機在進行 merge 的時候，git 預設會以 fast-forward 的模式進行 情境說明：當開設 branch feature/add-page 後要回到 master 合併 branch目前狀況： 若使用預設的 merge 採用 fast-forward 進行： 會將 branch 的 commit 紀錄合併到 master 上 指令：git merge feature/add-page 不使用 fast-forward ，以 no fast-forward 進行： 會保留原始 branch 上的 commit 紀錄，並在 master 上增加一個merge branch &#39;feature/add-page&#39; into master 指令：git merge feature/add-page --no-ff–no-ff 不要快速合併 no fast-forward 的好處 可以完整保留每一個分支的 commit 紀錄 no fast-forward 的壞處 若是 commit 紀錄只有一個，合併多次就會出現很多小叉路","categories":[{"name":"Git 筆記","slug":"Git-筆記","permalink":"https://tzuhui.github.io/categories/Git-筆記/"}],"tags":[{"name":"技術筆記","slug":"技術筆記","permalink":"https://tzuhui.github.io/tags/技術筆記/"},{"name":"git","slug":"git","permalink":"https://tzuhui.github.io/tags/git/"}]},{"title":"Vue CLI 3 環境變數設置","slug":"Vue/Vue-CLI3-env","date":"2019-01-07T16:00:00.000Z","updated":"2019-06-20T17:03:40.688Z","comments":true,"path":"2019/01/08/Vue/Vue-CLI3-env/","link":"","permalink":"https://tzuhui.github.io/2019/01/08/Vue/Vue-CLI3-env/","excerpt":"使用 Vue 開發時若有使用到 firebse 資料庫，會需要將資料庫金鑰加入到專案中，但在 commit 時不建議將金鑰也一併 commit 到公開的儲存庫上，這時就會建議使用環境變數","text":"使用 Vue 開發時若有使用到 firebse 資料庫，會需要將資料庫金鑰加入到專案中，但在 commit 時不建議將金鑰也一併 commit 到公開的儲存庫上，這時就會建議使用環境變數 新增一個 .env.local新增的 .env.local 會在所有環境中被載入，但會被 git 忽略在 .env.local 中加入環境變數，例如：123456FIREBASE_APIKEY=KeyFIREBASE_AUTODOMAIN=DomainFIREBASE_DATABASEURL=DatabaseUrlFIREBASE_PROJECTID=ProjectIdFIREBASE_STORAGEBUCKET=StorageBucketFIREBASE_MESSAGINGSENDERID=MessagingsId 左邊為環境變數的變數名稱，通常以全部都大寫字母來命名右邊是金鑰的內容，在 firebase 中可以取得相關的資料 在 JS 中取得環境變數設置在 JS 中要使用環境變數，只要在變數前加上 process.env 就可以了～例如：1process.env.FIREBASE_APIKEY 部署要注意的地方將金鑰改為環境變數之後，因為只有在本地端才能使用，所以要注意部署網站時要將環境變數設定到機器上以部署到 heroku 為例： 進入 heroku 專案畫面，點選 Settings，在 Settings 頁面有設定環境變數的地方 - Config Vars 點選 Reveal Config Vars 將變數加上，如下圖： 官網的環境變數說明：https://cli.vuejs.org/zh/guide/mode-and-env.html","categories":[{"name":"Vue 筆記","slug":"Vue-筆記","permalink":"https://tzuhui.github.io/categories/Vue-筆記/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://tzuhui.github.io/tags/Vue/"},{"name":"技術筆記","slug":"技術筆記","permalink":"https://tzuhui.github.io/tags/技術筆記/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://tzuhui.github.io/tags/JavaScript/"}]},{"title":"Vue CLI 3 快速建立篇","slug":"Vue/Vue-CLI3-create","date":"2018-12-27T16:00:00.000Z","updated":"2019-06-20T17:03:40.688Z","comments":true,"path":"2018/12/28/Vue/Vue-CLI3-create/","link":"","permalink":"https://tzuhui.github.io/2018/12/28/Vue/Vue-CLI3-create/","excerpt":"Vue CLI 3 在建立專案上已經可以利用 GUI 的方式來建立，不需要輸入一堆指令！官網說明：https://cli.vuejs.org/zh/guide/creating-a-project.html","text":"Vue CLI 3 在建立專案上已經可以利用 GUI 的方式來建立，不需要輸入一堆指令！官網說明：https://cli.vuejs.org/zh/guide/creating-a-project.html 使用 GUI 介面建立專案先介紹如何使用 GUI 介面建立專案 在終端機輸入：1vue ui 輸入後就會開啟一個瀏覽器介面，如下圖： 建立新專案點選創建，並選擇要創建專案的資料夾位置，選好後按下在此建立項目即可 Step1: 詳情 (Details)預設是填寫專案名稱以及選擇模組管理要使用 npm 或是 yarn，選擇預設則會兩者都有安裝，最後也有提供創建 git 的選擇可以依照自己的開發習慣填入，就可以到下一步了～ Step2: 預設 (Presets)預設有提供三個選項: 默認 (Default preset) 手動 (Manual) 遠程預設 (Remote preset) 默認 (Default preset)默認是一套已經定義好的插件與配置，選擇後就會使用這個配置直接創建專案預設也可以自己設定，可以透過選擇手動 (Manual) 來選取自己在開發上常用的配置並設為預設 手動 (Manual)只有選擇手動才會進入頁面中的功能與配置頁面 選擇手動 (Manual) 配置可以選擇下一步，就會進入功能頁面（Step3） 可以選擇自己常用的插件，像是 Bebal、ESLint、CSS 預處理器等等 選擇好以後按下一步就會進入到最後的配置頁面（Step4）這邊可以選擇像是 ESLint 要使用何種規範等等的細節設定 遠程預設 (Remote preset)遠程預設是可以使用 github、gitlab 等等已經設定好的遠端設定檔來直接創建專案主要是載入 preset.json 這個檔案 如果是使用 github 公開儲存庫中的檔案只要輸入 username / repo 就可以了如果是使用 gitlab, bitbucket 可以在前面加上前綴詞 這邊載入的是這位作者寫好的：https://github.com/xiabaiyang/vue-preset 以上，不管使用何種方式都可以建立起一個新專案～ RUN 一下新建立的專案在終端機輸入：npm1npm run serve yarn1yarn serve 就可以建立起來了！畫面： 還想再安裝插件如果在預設的時候沒有選擇好插件或是配置，可以再透過指令在建置好的專案中加入 例如： ESLint在終端機輸入：1vue add @vue/eslint 加入 Router1vue add router","categories":[{"name":"Vue 筆記","slug":"Vue-筆記","permalink":"https://tzuhui.github.io/categories/Vue-筆記/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://tzuhui.github.io/tags/Vue/"},{"name":"技術筆記","slug":"技術筆記","permalink":"https://tzuhui.github.io/tags/技術筆記/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://tzuhui.github.io/tags/JavaScript/"}]},{"title":"Vue CLI 3 安裝篇","slug":"Vue/Vue-CLI3-install","date":"2018-12-27T16:00:00.000Z","updated":"2019-06-20T17:03:40.688Z","comments":true,"path":"2018/12/28/Vue/Vue-CLI3-install/","link":"","permalink":"https://tzuhui.github.io/2018/12/28/Vue/Vue-CLI3-install/","excerpt":"Vue CLI 3 安裝非常簡單和官網上說明的可以說是一模一樣 XD官網說明：https://cli.vuejs.org/zh/guide/","text":"Vue CLI 3 安裝非常簡單和官網上說明的可以說是一模一樣 XD官網說明：https://cli.vuejs.org/zh/guide/ Stpe1: 卸載舊版 Vue CLI(本來就沒有安裝 Vue CLI 的話就可以跳過此步驟)Vue CLI 的模組名稱已經由 vue-cli 改成了 @vue/cli所以如果已經全局安裝 vue-cli (1.x 或 2.x)，要先卸載 在終端機輸入： npm1npm uninstall vue-cli -g yarn1yarn global remove vue-cli Stpe2: 安裝 CLI 3 指令卸載後就可以安裝 CLI 3 在終端機輸入： npm1npm install -g @vue/cli yarn1yarn global add @vue/cli Stpe3: 確認 Vue CLI 版本1vue --version 如果顯示 3.x.x 就代表安裝成功 安裝完成後就可以來建立專案囉！ 裝了 CLI 3 還是可以用 CLI 2 的模板Vue CLI 3 和以往的版本都使用了相同的 vue 命令所以如果要使用舊版的 vue init，只要全局安裝一個工具 在終端機輸入： 1npm install -g @vue/cli-init 安裝完後 ·vue init，vue init 的執行結果會和 vue-cli@2.x 相同1vue init webpack my-project","categories":[{"name":"Vue 筆記","slug":"Vue-筆記","permalink":"https://tzuhui.github.io/categories/Vue-筆記/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://tzuhui.github.io/tags/Vue/"},{"name":"技術筆記","slug":"技術筆記","permalink":"https://tzuhui.github.io/tags/技術筆記/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://tzuhui.github.io/tags/JavaScript/"}]}]}